generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id               String           @id @default(cuid())
  handle           String           @unique
  title            String
  description      String?
  descriptionHtml  String?
  availableForSale Boolean         @default(true)
  tags             String[]
  options          ProductOption[]
  variants         ProductVariant[]
  images           Image[]
  featuredImage    Image?          @relation("FeaturedImage", fields: [featuredImageId], references: [id])
  featuredImageId  String?
  priceRange      PriceRange?
  seo             SEO?
  collections     CollectionProduct[]
  cartItems       CartItem[]
  fileUrl         String?          // URL to the downloadable STL file
  updatedAt       DateTime         @updatedAt
  createdAt       DateTime         @default(now())
}

model ProductOption {
  id       String   @id @default(cuid())
  name     String
  values   String[]
  product  Product  @relation(fields: [productId], references: [id])
  productId String
}

model ProductVariant {
  id               String     @id @default(cuid())
  title            String
  availableForSale Boolean    @default(true)
  price            Money      @relation(fields: [priceId], references: [id])
  priceId          String     @unique
  product          Product    @relation(fields: [productId], references: [id])
  productId        String
  selectedOptions  Json       // Stores array of {name: string, value: string}
  cartItems        CartItem[]
}

model PriceRange {
  id                String @id @default(cuid())
  maxVariantPrice   Money  @relation("MaxPrice", fields: [maxVariantPriceId], references: [id])
  minVariantPrice   Money  @relation("MinPrice", fields: [minVariantPriceId], references: [id])
  maxVariantPriceId String
  minVariantPriceId String
  product           Product @relation(fields: [productId], references: [id])
  productId         String  @unique
}

model Money {
  id                String         @id @default(cuid())
  amount            String
  currencyCode      String
  priceRangeMax     PriceRange[]  @relation("MaxPrice")
  priceRangeMin     PriceRange[]  @relation("MinPrice")
  variant           ProductVariant?
  cartItem          CartItem?
  cart              Cart?         @relation("SubtotalAmount")
  cartTotal         Cart?         @relation("TotalAmount")
  cartTax           Cart?         @relation("TaxAmount")
}

model Image {
  id              String    @id @default(cuid())
  url             String
  altText         String?
  width           Int
  height          Int
  product         Product?  @relation(fields: [productId], references: [id])
  productId       String?
  featuredFor     Product[] @relation("FeaturedImage")
}

model Collection {
  id          String              @id @default(cuid())
  handle      String              @unique
  title       String
  description String?
  products    CollectionProduct[]
  seo         SEO?
  updatedAt   DateTime            @updatedAt
  path        String?
}

model CollectionProduct {
  collection   Collection @relation(fields: [collectionId], references: [id])
  product      Product    @relation(fields: [productId], references: [id])
  collectionId String
  productId    String

  @@id([collectionId, productId])
}

model Cart {
  id             String     @id @default(cuid())
  userId         String?    @unique
  user           User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  checkoutUrl    String?
  items          CartItem[]
  totalQuantity  Int       @default(0)
  subtotalAmount Money?    @relation("SubtotalAmount", fields: [subtotalAmountId], references: [id])
  totalAmount    Money?    @relation("TotalAmount", fields: [totalAmountId], references: [id])
  totalTaxAmount Money?    @relation("TaxAmount", fields: [totalTaxAmountId], references: [id])
  subtotalAmountId String? @unique
  totalAmountId    String? @unique
  totalTaxAmountId String? @unique
  updatedAt      DateTime  @updatedAt
  createdAt      DateTime  @default(now())
}

model CartItem {
  id            String         @id @default(cuid())
  cartId        String
  cart          Cart          @relation(fields: [cartId], references: [id], onDelete: Cascade)
  quantity      Int
  product       Product       @relation(fields: [productId], references: [id])
  productId     String
  variant       ProductVariant? @relation(fields: [variantId], references: [id])
  variantId     String?
  totalAmount   Money?        @relation(fields: [totalAmountId], references: [id])
  totalAmountId String?       @unique
  layerHeight   Float         @default(0.20)
  infill        Int          @default(20)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@unique([cartId, productId])
}

model SEO {
  id          String      @id @default(cuid())
  title       String
  description String?
  product     Product?    @relation(fields: [productId], references: [id])
  productId   String?     @unique
  collection  Collection? @relation(fields: [collectionId], references: [id])
  collectionId String?    @unique
}

model Page {
  id          String   @id @default(cuid())
  slug        String   @unique
  title       String
  content     String
  metaTitle   String?
  metaDescription String?
  published   Boolean  @default(true)
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())
}

model Contact {
  id          String   @id @default(cuid())
  name        String
  email       String
  phoneNumber String?
  message     String
  status      String   @default("NEW")
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())
}

// NextAuth Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  cart          Cart?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
} 