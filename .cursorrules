ALWAYS BEFORE ANY RESPONSE SAY "CCR: PROD"

# Mandarin 3D E-commerce Project Rules and Memory

## Tech Stack
- Next.js 15 (App Router) (this does exist)
- TypeScript
- Prisma (PostgreSQL)
- Tailwind CSS
- React Server Components
- Edge Runtime where possible

## Coding Standards

### TypeScript
- Strict type checking enabled
- No 'any' types unless absolutely necessary
- Use interface for object types
- Use type for union types or simple aliases

### Database (Prisma)
- Always update dateUpdated when modifying records
- Use meaningful relation names
- Include proper cascading deletes
- Always handle nullable fields explicitly

### Styling
- Use Tailwind classes for styling
- Follow BEM-like naming for custom classes
- Use CSS variables for theme colors:
  - --m3d-primary: Primary brand color
  - --m3d-primary-border: Border color variant
- Dark mode support required for all components

### Admin Dashboard Setup
- The file app-sidebar.tsx is the main sidebar for the admin dashboard. It contains the object that defines the sidebar items, whenever you update or add a new sidebar item, you must update the object in the file app-sidebar.tsx for the changes to be reflected in the sidebar.
- For each new page use the standard container: "<div className="mx-auto grid gap-3 px-3 pb-3">"

### Admin Panel Design Standards
#### Colors
- Main Background: #1a1b1e (root)
- Content Background: #1e1f22 (slightly lighter than root)
- Header Background: #1e1f22/50 with backdrop-blur-xl
- Borders: neutral-800/50
- Text Colors:
  - Primary: neutral-100
  - Secondary: neutral-400
  - Muted: neutral-500
- Status Colors:
  - Success: green-500/10 (bg), green-400 (text)
  - Warning: yellow-500/10 (bg), yellow-400 (text)
  - Error: red-500/10 (bg), red-500 (text)

#### Typography
- Headings: text-lg font-bold leading-none
- Subtext: text-xs text-neutral-500 dark:text-neutral-400
- Table Headers: text-xs font-medium
- Table Content: text-sm (primary), text-xs (secondary)
- Status Badges: text-xs font-medium

#### Spacing
- Page Container: p-3
- Component Gaps: gap-3
- Table Cells: px-3 py-2
- Button Padding: px-3 py-1.5 (sm)
- Icon Sizes: h-3.5 w-3.5

#### Components
1. Buttons:
   - Primary: neutral-100 bg in dark mode
   - Secondary: neutral-800 bg in dark mode
   - Destructive: red-900 bg in dark mode
   - Height: h-7 for compact buttons
   - Icons: gap-1.5 between icon and text

2. Tables:
   - Rounded Corners: rounded-md
   - Header: bg-neutral-50/50 dark:bg-neutral-900/50
   - Row Hover: bg-neutral-50/50 dark:bg-neutral-900/50
   - Dense Layout: compact padding and text sizes
   - Border: border-neutral-200 dark:border-neutral-800

3. Forms:
   - Input Height: h-8
   - Placeholder Color: neutral-500 dark:neutral-400
   - Border: border-neutral-200 dark:border-neutral-800
   - Background: white dark:bg-[#1a1b1e]

4. Status Badges:
   - Rounded Full
   - Compact Padding: px-1.5 py-0.5
   - Semi-transparent backgrounds
   - Consistent text size: text-xs

#### Layout
- Header Height: h-14
- Content Area: Full height with ScrollArea
- Sidebar: Collapsible with icon-only mode
- Breadcrumb: Hidden on mobile (md:block)
- Glass Effect Headers: backdrop-blur-xl

#### Responsive Design
- Mobile-first approach
- Collapsible sidebar on smaller screens
- Hidden breadcrumbs on mobile
- Responsive table with horizontal scroll
- Compact spacing on mobile

### Components
- Use React Icons (react-icons/fa) for icons
- Server Components by default
- 'use client' only when necessary
- Props interface for all components
- Proper error boundaries
- Loading states for async components

### API Routes
- Proper error handling with appropriate status codes
- Validate input data
- Use Edge runtime when possible
- Consistent response format:
  ```typescript
  {
    success: boolean;
    data?: any;
    error?: string;
  }
  ```

### Update for Next.js 15 params in slug routes:
This is how it should be done in nextjs 15

Dynamic Route Segments
Route Handlers can use Dynamic Segments to create request handlers from dynamic data.

`app/items/[slug]/route.ts`
```typescript
export async function GET(
  request: Request,
  { params }: { params: Promise<{ slug: string }> }
) {
  const slug = (await params).slug // 'a', 'b', or 'c'
}
```


### Forms
- Client-side validation
- Loading states
- Error handling
- Success feedback
- Accessible inputs
- Required field indicators

## Project Structure
/app - Next.js app router pages
/components - Reusable components
/lib - Utility functions and shared code
/prisma - Database schema and migrations
/public - Static assets

## Admin Panel Pages (In Progress)
1. Products List Page (/dashboard/products)
   - Table view of all products
   - Quick actions (edit, delete)
   - Filtering and sorting
   - Status: Completed ✅

2. Product Create/Edit Page (/dashboard/products/[id])
   - Form for product details
   - Image upload/management
   - Variant management
   - Price management
   - SEO settings
   - Status: Not Started ⏳

3. Collections List Page (/dashboard/collections)
   - Table view of all collections
   - Quick actions (edit, delete)
   - Status: Completed ✅

4. Collection Create/Edit Page (/dashboard/collections/[id])
   - Form for collection details
   - Product association management
   - SEO settings
   - Status: Completed ✅

5. Product Variants Management Page (/dashboard/products/[id]/variants)
   - Create/edit variants
   - Bulk price updates
   - Inventory management
   - Status: Not Started ⏳



## Current Features
- Product catalog
- Shopping cart
- User authentication
- Contact form
- Static pages
- Search functionality
- Collections
- Dark mode support

## Pending Tasks & Ideas
[ ] Admin dashboard for managing products


## Notes
- Moving away from Shopify to full Prisma implementation
- Focus on performance and SEO
- Maintain consistent dark mode support
- Keep accessibility in mind for all new features

## Environment Variables Required
- DATABASE_URL: PostgreSQL connection string
- NEXT_PUBLIC_API_URL: API base URL
- Additional vars as needed for future integrations

## Commands to Remember
```bash
# Database
bunx prisma generate
bunx prisma migrate dev
bunx prisma db seed

# Development
bun run dev
bun run build
bun run lint
```

## Last Updated
2025-01-30

## Git Rules
- Use git commit -m "message" to commit changes and format the messages in the standard classic commit message format.
- If a new feature is added, ask the user if they want to commit it to the main branch and push. If they just say commit then run git add . & git commit -m "message", remember to be descriptive in the commit message. If they say push then run git add . & git commit -m "message" & git push.

---
Note: This file should be updated whenever significant changes are made to the project structure or when new standards are established. Or when new roadmap items are added.