# Mandarin 3D E-commerce Project Rules and Memory

## Tech Stack
- Next.js 14 (App Router)
- TypeScript
- Prisma (PostgreSQL)
- Tailwind CSS
- React Server Components
- Edge Runtime where possible

## Coding Standards

### TypeScript
- Strict type checking enabled
- No 'any' types unless absolutely necessary
- Use interface for object types
- Use type for union types or simple aliases

### Database (Prisma)
- Always update dateUpdated when modifying records
- Use meaningful relation names
- Include proper cascading deletes
- Always handle nullable fields explicitly

### Styling
- Use Tailwind classes for styling
- Follow BEM-like naming for custom classes
- Use CSS variables for theme colors:
  - --m3d-primary: Primary brand color
  - --m3d-primary-border: Border color variant
- Dark mode support required for all components

### Admin Dashboard Setup
- The file app-sidebar.tsx is the main sidebar for the admin dashboard. It contains the object that defines the sidebar items, whenever you update or add a new sidebar item, you must update the object in the file app-sidebar.tsx for the changes to be reflected in the sidebar.
- For each new page make it with "<div className="flex flex-col p-6">" as the top level container.

### Components
- Use React Icons (react-icons/fa) for icons
- Server Components by default
- 'use client' only when necessary
- Props interface for all components
- Proper error boundaries
- Loading states for async components

### API Routes
- Proper error handling with appropriate status codes
- Validate input data
- Use Edge runtime when possible
- Consistent response format:
  ```typescript
  {
    success: boolean;
    data?: any;
    error?: string;
  }
  ```

### Forms
- Client-side validation
- Loading states
- Error handling
- Success feedback
- Accessible inputs
- Required field indicators

## Project Structure
/app - Next.js app router pages
/components - Reusable components
/lib - Utility functions and shared code
/prisma - Database schema and migrations
/public - Static assets

## Admin Panel Pages (In Progress)
1. Products List Page (/dashboard/products)
   - Table view of all products
   - Quick actions (edit, delete)
   - Filtering and sorting
   - Status: Completed ✅

2. Product Create/Edit Page (/dashboard/products/[id])
   - Form for product details
   - Image upload/management
   - Variant management
   - Price management
   - SEO settings
   - Status: Not Started ⏳

3. Collections List Page (/dashboard/collections)
   - Table view of all collections
   - Quick actions (edit, delete)
   - Status: Not Started ⏳

4. Collection Create/Edit Page (/dashboard/collections/[id])
   - Form for collection details
   - Product association management
   - SEO settings
   - Status: Not Started ⏳

5. Product Variants Management Page (/dashboard/products/[id]/variants)
   - Create/edit variants
   - Bulk price updates
   - Inventory management
   - Status: Not Started ⏳

6. Media Library Page (/dashboard/media)
   - Image upload and management
   - Image optimization
   - Alt text management
   - Status: Not Started ⏳

## Current Features
- Product catalog
- Shopping cart
- User authentication
- Contact form
- Static pages
- Search functionality
- Collections
- Dark mode support

## Pending Tasks & Ideas
[ ] Admin dashboard for managing products
[ ] Order management system
[ ] User reviews and ratings
[ ] Inventory tracking
[ ] Email notifications for orders
[ ] Better mobile navigation
[ ] Performance optimization for images
[ ] Analytics integration
[ ] SEO improvements
[ ] Automated testing setup
[ ] CI/CD pipeline
[ ] Better error pages
[ ] Rate limiting for API routes
[ ] Caching strategy implementation
[ ] Accessibility audit
[ ] Security audit
[ ] Set up admin route styling with data-admin-route attribute

## Notes
- Moving away from Shopify to full Prisma implementation
- Focus on performance and SEO
- Maintain consistent dark mode support
- Keep accessibility in mind for all new features

## Environment Variables Required
- DATABASE_URL: PostgreSQL connection string
- NEXT_PUBLIC_API_URL: API base URL
- Additional vars as needed for future integrations

## Commands to Remember
```bash
# Database
bunx prisma generate
bunx prisma migrate dev
bunx prisma db seed

# Development
bun run dev
bun run build
bun run lint
```

## Last Updated
2025-01-30

## Git Rules
- Use git commit -m "message" to commit changes and format the messages in the standard classic commit message format.
- If a new feature is added, ask the user if they want to commit it to the main branch and push. If they just say commit then run git add . & git commit -m "message", remember to be descriptive in the commit message. If they say push then run git add . & git commit -m "message" & git push.

---
Note: This file should be updated whenever significant changes are made to the project structure or when new standards are established. Or when new roadmap items are added.